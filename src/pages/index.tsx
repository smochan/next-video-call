import React, { use, useEffect, useState } from 'react'
import dynamic from "next/dynamic";
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router';
import { Inter } from 'next/font/google'
import styles from '@@/styles/Room.module.css'
import { v4 as uuidv4 } from "uuid";


// import { io } from "socket.io-client";
// import { Socket, io } from "socket.io-client"

const ws = new WebSocket("wss://y84svu0i5b.execute-api.eu-north-1.amazonaws.com/production/")

// const socket = io();

const inter = Inter({ subsets: ['latin'] })

const Home = () => {
  const router = useRouter();
  const [streams, setStreams] = useState<MediaStream[]>([]);
  const [msg, setMsg] = useState<string>("");
  const userId = uuidv4();

  // let roomId = router.query.id;
  // console.log("roomId", roomId);

  // console.log("abc", abc);

  const handleSelfStream = (device: string) => {
      const videoElement = document.getElementById(userId) as HTMLVideoElement;
      if (videoElement) {
        if(device === "mic") {
          videoElement.muted = !videoElement.muted;
          return;
        }
        if(device === "camera") {
          if(videoElement.srcObject == null){
            videoElement.srcObject = streams[0];
            videoElement.play();
          }
          else{
            videoElement.srcObject = null;
          }
        }
    }
  }

  useEffect(() => {
    const getOwnVideo = async () => {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true,
      });
      setStreams([stream]);

      // const resp = await fetch('/api/hello');
      // console.log(await resp.json());
    }
    getOwnVideo();
    ws.onopen = () => {
      console.log("connected to aws ws");
      ws.send(JSON.stringify({"action": "sendmessage", "message": "hello, everyone!"}))
      
      ws.onmessage = (event) => {
        console.log("got someThing", event.data, event);

      }
    }

    // })
    // const connectToNewUser = (userId: string, stream: MediaStream) => {
    //   console.log("connectToNewUser", userId);
    //   // const call = peer.call(userId, stream);
    //   // call.on("stream", (userVideoStream) => {
    //   //   setStreams([...streams, userVideoStream]);
    //   // });
    // };

    // socket.on("user-connected", (userId) =>{
    //   connectToNewUser(userId, streams[0]);
    // });


// const PORT = 8080;
// const socketClient = () => {
//   const socket = io(`:${PORT + 1}`, { path: "/api/socket", addTrailingSlash: false })

//   socket.on("connect", () => {
//     console.log("Connected",  roomId, userId)
//     socket.emit("join-room", roomId, userId )
//   })

//   socket.on("disconnect", () => {
//     console.log("Disconnected")
//   })

//   socket.on("user-connected", (userId) => {
//     console.log("user-connected", userId)
//     // const videoElement = document.getElementById(userId) as HTMLVideoElement;
//     // if (videoElement) {
//     //   videoElement.srcObject = streams[0];
//     //   videoElement.play();
//     // }
//   })

//   socket.on("connect_error", async err => {
//     console.log(`connect_error due to ${err.message}`)
//     await fetch("/api/socket")
//   })

//   return socket
// }
// socketClient();
    
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.header}>
          <h3>Video Chat</h3>
      </div>
      <div className={styles.main}>
        <div className={styles.main__left}>
          <div className={styles.videos__group}>
            <div className={styles.video_grid}>
              { streams.length ? streams.map((stream, index) => (
                <video  id={userId} key={index} className={styles.video} muted autoPlay ref={(videoRef) => {
                  if (videoRef) {
                    videoRef.srcObject = stream;
                  }
                }} />

              )) : <p>no stream</p>

              }
            </div>
          </div>
          <div className={styles.options}>
            <div className={styles.options__left}>
              <div className={styles.options__button} onClick={() => handleSelfStream("camera")}>
                <i className="fa fa-video-camera" aria-hidden="true">
                  cam
                </i>
              </div>
              <div className={styles.options__button } onClick={() => handleSelfStream("mic")}>
                {/* <i className="fa fa-microphone" aria-hidden="true"> */}
                  mic
                {/* </i> */}
              </div>
            </div>
            <div className={styles.options__right}>
              {/* <div
                className={
                  styles.options__button + " " + styles.background__red
                }
              >
                <i className="fa fa-phone" aria-hidden="true">
                  end
                </i>
              </div> */}
            </div>
          </div>
        </div>
        <div className={styles.main__right}>
          <h1>Global Chat</h1>
          <div className={styles.main__chat_window}>
            <ul className={styles.messages}></ul>
          </div>
          <div className={styles.main__message_container}>
            <input
              id="chat_message"
              type="text"
              placeholder="Enter your name to join room"
              onChange={(e) => setMsg(e.target.value)}
            />
            <div className={styles.options__button} onClick={() => ws.send(JSON.stringify({"action": "sendmessage", "message": msg}))}
            // onClick={() => router.push({
            //   pathname: "/room/[id]", 
            //   query: {id: roomId, userId: userId}}
            //   )}
              >
              <i className="fa fa-plus" aria-hidden="true">
                Join
              </i>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export default dynamic(() => Promise.resolve(Home), { ssr: false });